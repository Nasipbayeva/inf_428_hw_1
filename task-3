import math

def time_to_cyclic_features(hour):
    sin = math.sin(2 * math.pi * hour / 24)
    cos = math.cos(2 * math.pi * hour / 24)
    return sin, cos

def cyclic_time_diff(hour1, hour2):
    diff = abs(hour1 - hour2)
    return min(diff, 24 - diff)


#unittest
import unittest
from task_3 import time_to_cyclic_features, cyclic_time_diff

class TestTimeCyclicFeatures(unittest.TestCase):
    def test_time_to_cyclic_features(self):
        expected_values = {
            0: (0.0, 1.0),
            6: (1.0, 0.0),
            12: (0.0, -1.0),
            18: (-1.0, 0.0)
        }

        for hour, (expected_sin, expected_cos) in expected_values.items():
            sin, cos = time_to_cyclic_features(hour)
            self.assertEqual(round(sin, 5), expected_sin)
            self.assertEqual(round(cos, 5), expected_cos)

    def test_cyclic_time_diff(self):
        self.assertEqual(cyclic_time_diff(23, 1), 2)
        self.assertEqual(cyclic_time_diff(1, 23), 2)
        self.assertEqual(cyclic_time_diff(0, 12), 12)
        self.assertEqual(cyclic_time_diff(3, 9), 6)
        self.assertEqual(cyclic_time_diff(22, 6), 8)

def run_tests():
    unittest.TextTestRunner().run(unittest.makeSuite(TestTimeCyclicFeatures))

run_tests()
