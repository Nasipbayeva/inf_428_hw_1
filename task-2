import numpy as np

def generate_random_data(mean, variance, num_samples):
    return np.random.randint(max(mean - variance, 0), min(mean + variance + 1, 90), num_samples)

def department_threat_score(threat_scores):
    return np.mean(threat_scores)

def aggregated_threat_score(departments_data):
    weighted_scores = []
    total_weight = 0

    for department in departments_data:
        department_score = department_threat_score(department['scores'])
        importance = department['importance']
        weighted_scores.append(department_score * importance)
        total_weight += importance

    aggregated_score = sum(weighted_scores) / total_weight
    return min(max(aggregated_score, 0), 90)

#unittest
import unittest
from task_2 import generate_random_data, department_threat_score, aggregated_threat_score

class TestCyberSecurityScore(unittest.TestCase):
    def test_generate_random_data(self):
        data = generate_random_data(mean=45, variance=10, num_samples=100)
        self.assertTrue(all(0 <= score <= 90 for score in data))

    def test_department_threat_score(self):
        self.assertEqual(department_threat_score([10, 20, 30]), 20)

    def test_aggregated_threat_score_balanced(self):
        departments_data = [
            {'scores': generate_random_data(30, 5, 50), 'importance': 3},
            {'scores': generate_random_data(30, 5, 50), 'importance': 3},
            {'scores': generate_random_data(30, 5, 50), 'importance': 3}
        ]
        score = aggregated_threat_score(departments_data)
        self.assertAlmostEqual(score, 30, delta=5)

    def test_aggregated_threat_score_importance_weighting(self):
        departments_data = [
            {'scores': generate_random_data(20, 5, 50), 'importance': 1},
            {'scores': generate_random_data(60, 5, 50), 'importance': 5}
        ]
        score = aggregated_threat_score(departments_data)
        self.assertTrue(score > 35)

if __name__ == '__main__':
    unittest.main()
